#!/bin/bash

set -eux

## Move to the current directory
cd "$(dirname "$0")" || exit 1

zk_base_dir_name=zk-3.5.5
zk_install_dir=/${zk_base_dir_name}
zk_conf_dir=${zk_install_dir}/conf
zk_data_dir=${zk_install_dir}/data
zk_logs_dir=$zk_install_dir/logs
zk_jvm_env_file=$zk_conf_dir/java.env

function add_java_env() {
    rm -f ${zk_jvm_env_file}
    {
        echo "ZOO_LOG_DIR=${zk_install_dir}/logs"
        echo "JVMFLAGS=-Xms${ZK_MIN_HEAP} -Xmx${ZK_MAX_HEAP}"
    } >> ${zk_jvm_env_file}
    echo "<INFO> JVM Env file written to ${zk_jvm_env_file}"
}

function resolve_host_details() {
    HOST=$(hostname -s)
    DOMAIN_NAME=$(hostname -d)
    SINGLE_NODE_SETUP=false

    # For stateful pods, this name should be in form zk-0, zk-1, zk-2. The syntax is
    # headless service name + "-" + ordinal index. Since k8s does not provide a standard
    # way to access these values (some tickets are still open), we are accessing that by using
    # this hacky way.
    # BASH_REMATCH is basically like Java RegEx Matcher class which has 
    # matching indices and corresponding values.
    if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
        SVC_NAME=${BASH_REMATCH[1]}
        ORDINAL_INDEX=${BASH_REMATCH[2]}
    else
        echo "<WARN> Ordinal index cannot be determined from host name. A single node cluster will be set up."
        SINGLE_NODE_SETUP=true
        ORDINAL_INDEX=0
    fi
}

# Add zoo.cfg entries from ENV
function add_zk_cfg() {
    local zk_cfg_file=${zk_install_dir}/conf/zoo.cfg

    # Resolve host and ordinal index of this POD
    resolve_host_details

    if [ ! -f ${zk_cfg_file} ]; then
        {
            echo "#This file was autogenerated. DO NOT EDIT" 
            echo "dataDir=$zk_data_dir"
            echo "tickTime=$ZK_TICK_TIME"
            echo "initLimit=$ZK_INIT_LIMIT"
            echo "syncLimit=$ZK_SYNC_LIMIT"
            echo "autopurge.snapRetainCount=$ZK_AUTOPURGE_SNAP_RETAIN_COUNT"
            echo "autopurge.purgeInterval=$ZK_AUTOPURGE_PURGE_INTERVAL"
            echo "maxClientCnxns=$ZK_MAX_CLIENT_CNXNS"
            echo "4lw.commands.whitelist=$ZK_4LW_CMD_WHITELIST"
        } >> ${zk_cfg_file}
        
        ## Add ZK SERVERS
        if [[ "${SINGLE_NODE_SETUP}" = true ]]; then
            # If DOMAIN_NAME is missing use localhost, else use `HOST_NAME.DOMAIN_NAME`
            if [[ -z "$DOMAIN_NAME" ]]; then
                echo "<WARN> Domain name cannot be determined for the host. Using localhost to setup a single node cluster"
                echo "server.1=localhost:2888:3888" >> ${zk_cfg_file}
            else
                echo "server.1=$HOST.$DOMAIN_NAME:2888:3888" >> ${zk_cfg_file}
            fi
            
        else
            for (( i=1; i<=$ZK_NODE_COUNT; i++ ))
            do
                echo "server.$i=$SVC_NAME-$((i-1)).$DOMAIN_NAME:2888:3888" >> ${zk_cfg_file}
            done
        fi
    fi

    cat ${zk_cfg_file}
    echo 

    # Add MyId file.
    local my_id_file=$zk_data_dir/myid

    if [ ! -f $my_id_file ]; then
        ls -la /$zk_install_dir/
        local my_id_val=$((ORDINAL_INDEX+1))
        echo "<INFO> Setting myid as: ${my_id_val}"
        echo "$my_id_val" > $my_id_file
    fi
}

function create_dirs() {
    [ ! -d $zk_data_dir ] && { mkdir -p $zk_data_dir; }
    [ ! -d $zk_logs_dir ] && { mkdir -p $zk_logs_dir; }
}

export PATH="$zk_install_dir/bin:$PATH"
create_dirs && add_zk_cfg && add_java_env && exec zkServer.sh start-foreground